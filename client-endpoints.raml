#%RAML 1.0
title: Client API
baseUri: http://hotelservices.com/api-client/
version: 1.0

securitySchemes: 
  customSecurityToken:
    type: x-client-token
    description: Custom security token generated by the server. Distributed to clients upon successful login and used for requests requiring client authentication.
    describedBy: 
      headers: 
        x-session-token:
          description: This header contains a string represening a valid token received from the server upon successful login.
      responses: 
        401:
          description: |
            Client provided an invalid token (invalid or malformed token format, expired token) and couldn't be authenticated. Re-authentication is necessary.
          body: 
            application/json:
              type: authenticationError

types:
  authenticationError:
    type: object
    properties: 
      desc:
        type: string
        required: true
        description: A description of the type of the authentication error.

  clientSessionToken:
    type: object
    properties: 
      id:
        type: integer
        description: An unique client ID used in accessing server resources.
        required: true
      createdAt:
        type: datetime
        description: Date of token creation
        required: true
  
  clientSecrets:
    description: An object containing client secrets (login, password) necessary for initial authentication and distribution of a token.
    type: object
    properties: 
      login:
        description: Current user email is used as a login
        type: string
        required: true
      password:
        type: string
        required: true
        
  clientInfo:
    type: object
    description: Data describing client's account
    properties: 
      name:
        type: string
        required: true
      surname:
        type: string
        required: true
      username:
        type: string
        required: true
      email:
        type: string
        required: true
        
  editClientInfo:
    type: object
    description: Data describing client's account
    minProperties: 1
    properties:
      username:
        type: string
        required: false
      email:
        type: string
        required: false
  

/client:
  get:
    description: Get logged in client information.
    responses:
      200:
        body:
          application/json:
            type: clientInfo
            example: |
              {
                "name": "Jan",
                "surname": "Kowalski",
                "username": "User123",
                "email": "j.kowalski@example.mail.com"
              }
      401:
        description: Login credentials not correct
  patch:
    description: Update currently logged in client's information.
    body: 
      application/json:
        type: editClientInfo
        examples:
          Only-username-change: |
            {
              "username": "newUsername123"
            }
          Username-and-email-change: |
            {
              "email": "newEmail@example.mail2.pl",
              "username": "newUsername123"
            }
    responses:
      200:
        description: Profile was successfuly updated.
      400:
        description: Profile couldn't be updated.
        body: 
          application/json:
            type: object
            examples:
              Invalid-email-format: |
                {
                  "errorDescription": "Provided email has an invalid format"
                }
              Invalid-username: |
                {
                  "errorDescription": "Provided username contains invalid characters or does not differ from currently set username"
                }
  /login:
    post:
      description: Endpoint used to acquire client token used for further authentication and authorization. This endpoint is not protected by a security scheme.
      body:
        application/json:
          type: clientSecrets
          example: |
            {
              "login": "usermail123@example.mail.com",
              "password": "password123"
            }
      responses: 
        200:
          body: 
            application/json:
              description: A JWT token generated by the server
              type: clientSessionToken
              example: |
                {
                  "id": 7,
                  "createdAt": "2020-10-02T10:00:00-05:00"
                }
        401:
          body: 
            application/json:
              description: User with provided login (email) does not exists or provided password is incorrect
              type: authenticationError
              example: |
                {
                  "desc": "Provided credentials are incorrect"
                }
  /reservations:
    get:
      description: Get list of all reservations made by the client
      responses:
        200:
          body:
            application/json:
              description: List of reservation information and offerID relating to the reservation and preview information related to the hotel
              type: |
                [
                  {
                    "hotelInfoPreview": {
                      "hotelID": int,
                      "hotelName": string,
                      "country": string,
                      "city": string
                    },
                    "reservationInfo":  {
                      "reservationID": int,
                      "from": datetime,
                      "to": datetime,
                      "numberOfChildren": int,
                      "numberOfAdults": int,
                      "reviewID": int? (optional - present if there is no client review for an offer)
                    }
                    "offerInfoPreview": {
                      "offerID": int,
                      "offerTitle": string,
                      "offerPreviewPicture": file,
                    }
                  }
                ]
    /{reservationID}:
      delete:
        description: Cancel exisiting reservation provided that it hasn't started
        responses:
          200:
          400:
            body:
              application/json:
                description: Reservations cannot be deleted unless they haven't begun
                example: |
                  {
                    "error": "Reservation is currently underway or already completed"
                  }
          401:
            description: Cannot delete reservation becuase of no ownership of a reservation with ID equal to reservationID path parameter
          404:
            description: Reservation with ID equal to reservationID path parameter doesn't exist
      /review:
        get:
          description: Pobiera opiniÄ™ do danej rezerwacji
          responses:
            200:
              body:
                  application/json: 
                     type: |
                        {
                          "reviewID": int,
                          "content": string,
                          "rating": int,
                          "creationDate": datetime,
                          "reviewerUsername": string
                        }
            404:
              description: Reservation not found
        put:
          description: Creates/edits a new review related to an offer
          body:
            application/json:
              type: |
                {
                  "content": string,
                  "rating": int,
                }                
            responses:
              200:
              404:
        delete:
            description: Deletes a client review related to an offer
            responses:
              200:
              404:

/hotels:
  get:
    description: Returns list of hotels according to filter values
    is: [pageable]
    queryParameters:
      description: search based on prefix match (case-insensitive)
      country:
        type: string
        required: false
      city:
        type: string
        required: false
      hotelName:
        type: string
        required: false
    responses:
      200:
        body:
          application/json:
            description: Array of objects containing preview information related to hotels
            type: |
              [
                {
                  "hotelID": int,
                  "hotelName": string,
                  "country": string,
                  "city": string,
                  "previewPicture": file
                }
              ]
  /{hotelID}:
    get:
      description: Gets detailed information about a hotel
      responses:
        200:
          body:
            application/json:
              type: |
                {
                  "hotelName": string,
                  "hotelDescription": string,
                  "country": string,
                  "city": string,
                  "hotelPictures": file[]
                }
        404:
          description: Hotel with ID equal to hotelID parameter does not exist
    /offers:
      get:
        description: Returns list of offers according to filter values
        is:  [pageable]
        queryParameters:
          fromTime:
            displayName: From
            type: date-only
            required: false
            example: 2021-05-23
          toTime:
            displayName: To
            type: date-only
            required: false
            example: 2021-06-01
          minGuests:
            type: integer
            required: false
            minimum: 1
            example: 3
          costMax:
            type: integer
            required: false
            minimum: 0
            example: 100
          costMin:
            type: integer
            required: false
            minimum: 0
            example: 50
        responses:
        200:
          body:
            application/json:
              type: |
                {
                  "offerID": int,
                  "offerTitle": string,
                  "offerPreviewPicture": file,
                  "maxGuests": int,
                  "costPerChild": double,
                  "costPerAdult": double
                }
          404:
            description: Hotel with ID equal to hotelID parameter does not exist
      /{offerID}:
        get:
          description: Returns detailed information about an offer
          responses:
          200:
            body:
              application/json:
                type: |
                  {
                    "offerTitle": string,
                    "offerDescription": string
                    "offerPictures": file[],
                    "maxGuests": int,
                    "costPerChild": double,
                    "costPerAdult": double,
                    "availabilityTimeIntervals": (datetime, datetime)[]
                    "isActive": boolean,
                    "isDeleted": boolean,
                  }
            404:
              description: Resource not found: e.g. there is no hotel with ID equal to hotelID that has an offer with ID equal to offerID or hotel/offer does not exist

/hotels/{hotelID}/offers/{offerID}/reservations:
  post:
    description: Create new reservation
    body:
      application/json:
        type: |
          {
            "from": datetime,
            "to": datetime,
            "numberOfChildren": int,
            "numberOfAdults": int
          }
    responses:
      200:
      400:
        body:
          application/json:
            description: Cannot create a reservation if the offer is inactive or deleted or is unavailable during chosen time interval
            example: |
              {
                "error": "Offer is not available - please refresh information related to the offer availability"
              }
      404:
        description: Resource not found: e.g. there is no hotel with ID equal to hotelID that has an offer with ID equal to offerID or hotel/offer does not exist

/hotels/{hotelID}/offers/{offerID}/reviews:
  get:
    description: Returns all reviews related to an offer
    responses:
      200:
        body:
          application/json:
            description: An arry of objects containing information related to offer reviews
            type: |
              [
                {
                  "reviewID": int,
                  "content": string,
                  "rating": int,
                  "creationDate": datetime,
                  "reviewerUsername": string
                }
              ]
      404:
        description: Resource not found: e.g. there is no hotel with ID equal to hotelID that has an offer with ID equal to offerID or hotel/offer does not exist

/hotels/{hotelID}/reviews:
  get:
    is:  [pageable]
    description: Returns all reviews related to a hotel
    responses:
      200:
        body:
          application/json:
            description: An arry of objects containing information related to offer reviews
            type: |
              [
                {
                  "reviewID": int,
                  "offerID": int,
                  "offerTitle": string,
                  "content": string,
                  "rating": int,
                  "creationDate": datetime,
                  "reviewerUsername": string
                }
              ]
      404:
        description: Hotel not found
